Sistema operativo utilizado
Linux Torre 5.10.60.1-microsoft-standard-WSL2 #1 SMP Wed Aug 25 23:20:18 UTC 2021 x86_64 GNU/Linux
==== run-san ====
gcc -g -DSAN=1 -fsanitize=address -fsanitize=undefined -Wall -Werror -std=c18  prod.c test-prod.c BigInt.c prod.h BigInt.h -lm -lpthread -o prod.bin-san
./prod.bin-san
Test: factorial de numeros pequenos con 2 a 17 threads
10
20
30
40
50
60
70
80
90
100

Aprobado
--------------
Test: speed up
Intento: 1
Calculando factorial de 10000 secuencialmente
En mi computador Ryzen 3550H se demoro unos 20 segundos
Tiempo=101 milisegundos, cifras hexadecimales=29615
Calculando en paralelo con 4 threads
Deberia demorarse menos que la version secuencial
En mi computador el speed up rondaba 1.4 con 2 cores
Llamada secuencial con i=7500 j=9999
Llamada secuencial con i=2500 j=4999
Llamada secuencial con i=0 j=2499
Llamada secuencial con i=5000 j=7499
Tiempo=45 milisegundos, speed up=2.244444
Felicitaciones: aprobo este modo de ejecucion
==== run-g ====
gcc -g -Wall -Werror -std=c18  prod.c test-prod.c BigInt.c prod.h BigInt.h -lm -lpthread -o prod.bin-g
./prod.bin-g | tee run.log
Test: factorial de numeros pequenos con 2 a 17 threads
100
200
300
400
500
600
700
800
900
1000

Aprobado
--------------
Test: speed up
Intento: 1
Calculando factorial de 40000 secuencialmente
En mi computador Ryzen 3550H se demoro unos 20 segundos
Tiempo=412 milisegundos, cifras hexadecimales=138453
Calculando en paralelo con 4 threads
Deberia demorarse menos que la version secuencial
En mi computador el speed up rondaba 1.4 con 2 cores
Llamada secuencial con i=30000 j=39999
Llamada secuencial con i=20000 j=29999
Llamada secuencial con i=10000 j=19999
Llamada secuencial con i=0 j=9999
Tiempo=245 milisegundos, speed up=1.681633
Felicitaciones: aprobo este modo de ejecucion
Verificando que se crearon 4 procesos pesados
1c1
< 4
---
> 4
No aprueba: no se crearon 4 procesos
