Sistema operativo utilizado
Linux DESKTOP-6L9EJ9T 5.10.102.1-microsoft-standard-WSL2 #1 SMP Wed Mar 2 00:30:59 UTC 2022 x86_64 GNU/Linux
==== run-san =============================
NTHOBJ=nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -g -c -fsanitize=address -fsanitize=undefined -DSANITIZE -Wall -Werror -pedantic -std=c18 -Wno-unused-function -Wno-unused-variable -DNTHREADS  nthread.c nutil.c ntime.c pss.c sched-fcfs.c sched-rr.c ncompartir.c sched-pri-1core.c sched-fcfs-1core.c sem.c mutex-cond.c nmsgs.c nStack-amd64.s nsystem.c
rm -f libnth-san.a
ar r libnth-san.a nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
ranlib libnth-san.a
rm nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -g -fsanitize=address -fsanitize=undefined -DSAN -DNTHREADS -Wall -Werror -pedantic -std=c18 -InKernel test-compartir.c none.c nKernel/libnth-san.a -lm -lpthread -lrt -o test-compartir.nbin-san
Ejecute con: test-compartir.nbin-san ... opciones ... (-h para help)
--------------------------------------------
./test-compartir.nbin-san
Info: setting single-core FCFS scheduling
Los mismos testeos de la tarea 4, sin timeout
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1000: lanzando T3
 1000: T3 solicita acceder
 3000: lanzando T1
 3000: T1 solicita compartir p
 3000: T4 accede a p
 3000: T3 accede a p
 4001: lanzando T2
 4001: T2 solicita acceder
 4001: T2 accede a p
 5000: T4 devuelve
 6001: T2 devuelve
 7001: T3 devuelve
 7001: T1 termina de compartir p
 9001: T1 solicita compartir q
11001: T2 solicita acceder
11001: T2 accede a q
12002: T2 devuelve
12002: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 12 segundos
Se hicieron 101 llamadas a nCompartir

Los mismos testeos de la tarea 4, con timeout que no se vence
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1000: lanzando T3
 1000: T3 solicita acceder
 3000: lanzando T1
 3000: T1 solicita compartir p
 3000: T4 accede a p
 3000: T3 accede a p
 4001: lanzando T2
 4001: T2 solicita acceder
 4001: T2 accede a p
 5000: T4 devuelve
 6001: T2 devuelve
 7001: T3 devuelve
 7001: T1 termina de compartir p
 9001: T1 solicita compartir q
11001: T2 solicita acceder
11001: T2 accede a q
12001: T2 devuelve
12001: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 12 segundos
Se hicieron 101 llamadas a nCompartir

Nuevos testeos para timeouts que si se vencen
nAcceder con timeout que se vence
T=0 Creando 1 threads
T=0 llamada a nAcceder(100) id=0
T=0 esperando thread 0
